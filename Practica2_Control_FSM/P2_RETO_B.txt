#include <Controllino.h>  // Librería del Controllino

// Definición de LEDs para Semáforo A (Norte-Sur)
const int ROJO_A = CONTROLLINO_D0;    // LED Rojo Semáforo A
const int AMARILLO_A = CONTROLLINO_D1; // LED Amarillo Semáforo A
const int VERDE_A = CONTROLLINO_D2;   // LED Verde Semáforo A

// Definición de LEDs para Semáforo B (Este-Oeste)
const int ROJO_B = CONTROLLINO_D6;    // LED Rojo Semáforo B
const int AMARILLO_B = CONTROLLINO_D7; // LED Amarillo Semáforo B
const int VERDE_B = CONTROLLINO_D8;   // LED Verde Semáforo B

// Estados de la máquina de estados finita (FSM)
typedef enum {
  Averde_Brojo,      // Semáforo A en verde, B en rojo
  Aamarillo_Brojo,   // Semáforo A en amarillo, B en rojo
  Arojo_Bverde,      // Semáforo A en rojo, B en verde
  Arojo_Bamarillo    // Semáforo A en rojo, B en amarillo
} EstadoSemaforo;

// Variables de la FSM
EstadoSemaforo estado_actual = Averde_Brojo;
unsigned long tiempo_anterior = 0;
unsigned long tiempo_actual = 0;

// Tiempos estándar para cada estado (en milisegundos)
const unsigned long TIEMPO_VERDE = 3000;    // 5 segundos
const unsigned long TIEMPO_AMARILLO = 2000; // 2 segundos

void setup() {
  // Configurar LEDs como salida
  pinMode(ROJO_A, OUTPUT);
  pinMode(AMARILLO_A, OUTPUT);
  pinMode(VERDE_A, OUTPUT);
  pinMode(ROJO_B, OUTPUT);
  pinMode(AMARILLO_B, OUTPUT);
  pinMode(VERDE_B, OUTPUT);
  
  // Inicializar todos los LEDs apagados
  apagarTodosLEDs();
  
  // Inicializar tiempo y comenzar con A verde, B rojo
  tiempo_anterior = millis();
  actualizarLEDs();
}

void loop() {
  tiempo_actual = millis();
  ejecutarFSM();
}

void ejecutarFSM() {
  unsigned long tiempo_transcurrido = tiempo_actual - tiempo_anterior;
  
  switch (estado_actual) {
    case Averde_Brojo:
      if (tiempo_transcurrido >= TIEMPO_VERDE) {
        estado_actual = Aamarillo_Brojo;
        tiempo_anterior = tiempo_actual;
        actualizarLEDs();
      }
      break;
      
    case Aamarillo_Brojo:
      if (tiempo_transcurrido >= TIEMPO_AMARILLO) {
        estado_actual = Arojo_Bverde;
        tiempo_anterior = tiempo_actual;
        actualizarLEDs();
      }
      break;
      
    case Arojo_Bverde:
      if (tiempo_transcurrido >= TIEMPO_VERDE) {
        estado_actual = Arojo_Bamarillo;
        tiempo_anterior = tiempo_actual;
        actualizarLEDs();
      }
      break;
      
    case Arojo_Bamarillo:
      if (tiempo_transcurrido >= TIEMPO_AMARILLO) {
        estado_actual = Averde_Brojo;
        tiempo_anterior = tiempo_actual;
        actualizarLEDs();
      }
      break;
  }
}

void actualizarLEDs() {
  // Primero apagar todos los LEDs
  apagarTodosLEDs();
  
  // Encender LEDs según el estado actual
  switch (estado_actual) {
    case Averde_Brojo:
      digitalWrite(VERDE_A, HIGH);
      digitalWrite(ROJO_B, HIGH);
      break;
      
    case Aamarillo_Brojo:
      digitalWrite(AMARILLO_A, HIGH);
      digitalWrite(ROJO_B, HIGH);
      break;
      
    case Arojo_Bverde:
      digitalWrite(ROJO_A, HIGH);
      digitalWrite(VERDE_B, HIGH);
      break;
      
    case Arojo_Bamarillo:
      digitalWrite(ROJO_A, HIGH);
      digitalWrite(AMARILLO_B, HIGH);
      break;
  }
}

void apagarTodosLEDs() {
  digitalWrite(ROJO_A, LOW);
  digitalWrite(AMARILLO_A, LOW);
  digitalWrite(VERDE_A, LOW);
  digitalWrite(ROJO_B, LOW);
  digitalWrite(AMARILLO_B, LOW);
  digitalWrite(VERDE_B, LOW);
}